---
title: "HLS_bulkdownload"
format: html
filters:
  - grouped-tabsets
environments: [program]
editor: visual
---

# How to: Bulk Query HLS data with NASA's CMR-STAC API

## Objectives

-   Access [**H**armonized **L**andsat **S**entinel](https://lpdaac.usgs.gov/data/get-started-data/collection-overview/missions/harmonized-landsat-sentinel-2-hls-overview/) product data through [NASA's CMR-STAC API](https://cmr.earthdata.nasa.gov/search/site/docs/search/api.html)

-   Perform large queries (requests that return more than 2000 granules)

-   Prepare a list of URLs representing query

## Define Environment:

::: {.panel-tabset}
## R

```{r}
library(httr)
library(purrr)
library(jsonlite)
library(DT)
library(magrittr)
library(xml2)
library(dplyr)
library(crul)
library(reticulate)

# install 
conda_install(envname = "r-reticulate", packages = c("requests", "aiohttp"))

# import SciPy (it will be automatically discovered in "r-reticulate")
aiohttp <- import("aiohttp")
requests <- import("requests")
```

## Python

```{python}
import requests
import math
import aiohttp 
import asyncio
import time
```
:::

## Define parameters needed for search:

1.  **URL**, for the LPCLOUD catalog

::: {.panel-tabset}
## R

```{r}
lpcloud_url <- "https://cmr.earthdata.nasa.gov/stac/LPCLOUD/search"
```

## Python

```{python}
CMR_OPS= 'https://cmr.earthdata.nasa.gov/stac/LPCLOUD/search'
url = f'{CMR_OPS}/{"granules"}'
```
:::

2.  **Collection ID**, as a list

::: {.panel-tabset}
## R

```{r}
c <- list("HLSS30.v2.0", "HLSL30.v2.0")
```

## Python

```{python}
collections = ['C2021957657-LPCLOUD', 'C2021957295-LPCLOUD']
```
:::

3.  **Date-Time**, specified as `YYYY-MM-DDTHH:MM:SSZ/YYYY-MM-DDTHH:MM:SSZ` where: YYYY = year (ie., 2002), MM = month (ie., January = 01), DD = day of month, HH = hour, MM (second appearance) = minute, SS = second, Z = constant (part of the temporal query definition)

::: {.panel-tabset}
## R

```{r}
d <- '2017-01-01T00:00:00Z/2017-01-31T23:59:59Z'
pages <- 2000
```

## Python

```{python}
datetime_range = '2021-10-17T00:00:00Z,2021-10-19T23:59:59Z'
page_size = 2000
```
:::

4.  **Lower Left and Upper Right Coordinates of Spatial Bounding Box**, in decimal degrees - can draw a spatial bounding box [here](http://geojson.io/#map=2/20.0/0.0) and and use the 'Draw a Marker' tool to determine the coordinates that correspond to the lower left, and upper right corners of the bounding box.

::: {.panel-tabset}
## R

```{r}
b <- c(-25.08311136003093, 31.47994995117188,-24.87896163119999,31.718902587890625)
```

## Python

```{python}
b = '-25.08311136003093, 31.47994995117188,-24.87896163119999,31.718902587890625'
```
:::

## Search:

Define search parameters as a list, perform search, check number of results returned.

::: {.panel-tabset}
## R

```{r}
body <- list(limit =100, datetime = d, bbox = b, collections = c)

Results <- httr::POST(lpcloud_url, body, encode = "json") %>% 
                 httr::content(as = "text")%>% 
                 fromJSON()
    
    names(Results)         # check names in Search Results
    Results$numberReturned # look at number returned
    

# help define components of url
crul::url_parse("http://www.domain.com/path/to/resource?arg1=true&arg2=false")    
    

```

## Python

```{python}
response = requests.get(url, 
                        params={
                            'concept_id': collections, # collections
                            'temporal': datetime_range,
                            'page_size': page_size,
                            },
                        headers={
                            'Accept': 'application/json'
                            }
                            )
                       
print(response.status_code)
```
:::

## View Results:

::: {.panel-tabset}
## R

```{r}
    ViewSearchResults <- function(SearchResults) {
          granule_list <- list()
          n <- 1
          for(row in row.names(SearchResults$features)){
            f <- SearchResults$features[row,]
            for (b in f$assets){
              df <- data.frame(Collection = f$collection,
                               Granule_ID = f$id,
                                 Datetime = f$properties$datetime,
                               Asset_Link = b$href, stringsAsFactors=FALSE)
              granule_list[[n]] <- df
              n <- n + 1
            }
          }
          
          search_df <- do.call(rbind, granule_list)
          print(DT::datatable(search_df))
    }
    
    ViewSearchResults(Results)
```

## Python

```{python}


```
:::

### Contact Information

**Material written by Bri Lind^1^, Erik Bolch^1^, Mahsa Jami^1^, and Aaron Friesz^1^**\
Contact: [LPDAAC\@usgs.gov](mailto:LPDAAC@usgs.gov){.email}\
Voice: +1-866-573-3222\
Organization: Land Processes Distributed Active Archive Center (LP DAAC)\
Website: <https://lpdaac.usgs.gov/>Â \
Date last modified: Summer-2022

^1^ KBR, Inc., contractor to the U.S. Geological Survey, Earth Resources Observation and Science (EROS) Center, Sioux Falls, South Dakota, USA. Work performed under USGS contract G0121D0001 for LP DAAC^2^.

^2^ LP DAAC Work performed under NASA contract NNG14HH33I.
